// vite.config.js
import { defineConfig } from "file:///Users/marty/gitmllc/vite-poc/node_modules/vite/dist/node/index.js";
import Inspect from "file:///Users/marty/gitmllc/vite-poc/node_modules/vite-plugin-inspect/dist/index.mjs";

// src/vite-azoth-plugin.js
import { Parser } from "file:///Users/marty/gitmllc/vite-poc/node_modules/acorn/dist/acorn.mjs";

// src/parsers/acorn-azoth/index.js
import { Parser as AcornParser } from "file:///Users/marty/gitmllc/vite-poc/node_modules/acorn/dist/acorn.mjs";

// src/generator/index.js
import { GENERATOR, generate } from "file:///Users/marty/gitmllc/vite-poc/node_modules/astring/dist/astring.mjs";

// src/parsers/acorn-azoth/template-parser.js
import { Parser as HtmlParser } from "file:///Users/marty/gitmllc/vite-poc/node_modules/htmlparser2/lib/esm/index.js";

// src/generator/index.js
var { ArrowFunctionExpression } = GENERATOR;

// src/vite-azoth-plugin.js
import { SourceMapGenerator } from "file:///Users/marty/gitmllc/vite-poc/node_modules/source-map/source-map.js";
import { normalizePath } from "file:///Users/marty/gitmllc/vite-poc/node_modules/vite/dist/node/index.js";

// vite.config.js
var vite_config_default = defineConfig({
  test: {
    // update: true,
    testTimeout: 3e4
  },
  plugins: [
    // AzothPlugin(),
    Inspect()
  ]
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
